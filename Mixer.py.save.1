
#!/usr/bin/env python
# coding: utf-8

# In[3]:


import numpy as np
import pandas as pd
import os

from multiprocessing import Pool
# from ipynb.fs.full.nuSvrR import nuSvrR
from nuSvmRobust import nuSvmRobust
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import scale


# In[2]:


# Function Mixer
# Main Function
# @method Mixer
# @param [DataFrame] Signature
# @param [DataFrame] Expression
# @param [int] num Cores
# @return -------
def Mixer(X, Y, cores):

    print('Normalizing data')

    # Normalize signature Matrix
    mean = X.iloc[:, 1:].mean()
    std = X.iloc[:, 1:].stack().std()
    X.iloc[:, 1:] = (X.iloc[:, 1:] - mean.mean()) / std
    
    # Intersection between X and Y
    X = X.loc[X['Gene symbol'].isin(Y['Gene symbol'])]
    Y = Y.loc[Y['Gene symbol'].isin(X['Gene symbol'])]
    
    # Ordering by GeneSymbol
    X = X.sort_values(by=['Gene symbol'])
    Y = Y.sort_values(by=['Gene symbol'])

    # Slice Gene symbol column
    X = X.iloc[:, 1:]
    Y = Y.iloc[:, 1:]
    X.reset_index(drop=True, inplace=True)
    
    # Normalize features Matrix
    #scaler = StandardScaler()
    #scaler.fit(Y)
    
    #Yn = pd.DataFrame(scaler.transform(Y.values), columns=Y.columns, index=Y.index)

    Yn = pd.DataFrame(scale(Y), index=Y.index, columns=Y.columns)

    out = list()
    k = 1
    for i, j in Yn.iteritems():
            print('--------------------------------------------------')
            print('Subject: ' + str(i) + ' Nro: ' + str(k))
            print('--------------------------------------------------')
            out.append(nuSvmRobust(X = X, Y = j, nuseq = [0.25,0.5,0.75], delta = 0.007))
            k = k + 1

    #out = [pd.apply(nuSvmRobust, args=(X, j, [0.25, 0.5, 0.75], 0.007)) for i, j in Yn.iteritems()]
    print('Processing...')

    print('Finish nuSvm')

    matWa = pd.DataFrame()
    matWp = pd.DataFrame()
    matRes = pd.DataFrame()

    for i in out:
        matWa = matWa.append(i.Wa, ignore_index=True)
        matWp = matWp.append(i.Wp, ignore_index=True)
        matRes = matRes.append(pd.DataFrame([[i.RMSEa, i.RMSEp, i.Ra, i.Rp,  i.BestParams, i.Iter]], columns=['RMSEa', 'RMSEp', 'Ra', 'Rp',  'BestParams', 'Iter']), ignore_index=True)

    matWa.index = Y.columns.values
    matWa.columns = X.columns.values

    matWp.index = Y.columns.values
    matWp.columns = X.columns.values

    matRes.index = matWp.index.values

    return(pd.DataFrame([[matWa, matWp, matRes]], columns=['MIXabs', 'MIXprop', 'ACCmetrix']))
